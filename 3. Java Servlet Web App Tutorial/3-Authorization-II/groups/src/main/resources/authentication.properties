aad.clientId={enter-your-client-id-here}
aad.secret={enter-your-client-secret-here}
aad.authority=https://login.microsoftonline.com/{enter-your-tenant-id-here}
aad.scopes=GroupMember.Read.All

## TODO: use aad.instance instead of authority
## TODO: build authority from instance+tenant
## TODO: also baseURL for graph should be configurable (graph.us, graph.cn, etc.)

aad.signOutEndpoint=/oauth2/v2.0/logout/
aad.postSignOutFragment=?post_logout_redirect_uri=

# app.homePage is by default set to dev server address and app context path on the server
# for apps deployed to azure, use https://your-sub-domain.azurewebsites.net
app.homePage=http://localhost:8080/msal4j-servlet-groups

# endpoint for AAD redirect. Configure this to be the same as the URL pattern for AADRedirectServlet.java
app.redirectEndpoint=/auth/redirect

# app's state value validity in seconds:
app.stateTTL=600
# where to store session variables related to MSAL
app.sessionParam=msalAuth
# protect these endpoints by checking authenticated 
app.protect.authenticated=/token_details, /groups

# define short names for group IDs here for the app. This will be useful in the next key (app.protect.groups).
# EXCLUDE the curly braces, they are in this file only as delimiters.
# example:
# app.groups=groupA abcdef-qrstuvw-xyz groupB abcdef-qrstuv-wxyz
app.groups=admin {enter-your-admins-group-id-here}, user {enter-your-users-group-id-here}

# A route and its corresponding group(s) that can view it, <space-separated>; the start of the next route & its group(s) is delimited by a <comma-and-space-separator>
# this says: /admins_only can be accessed by admin group, /regular_user can be accessed by admin group and user group
app.protect.groups=/admin_only admin, /regular_user admin user
